use teloxide::{prelude::*, utils::command::BotCommands};
use teloxide::types::InputFile;

use crate::keyboard::inline_keyboard::create_inline_keyboard_meeting_button;
// use crate::ai::{create_practice::CreatePractice, gpt_client::GetResultApiAi};




#[derive(BotCommands, Clone)]
#[command(rename_rule = "lowercase", description = "These commands are supported:")]
pub enum Command {
    #[command(description = "Bot info")]
    Help,
    #[command(description = "start the bot")]
    Start,
}


pub async fn command_handler(bot: Bot, msg: Message, cmd: Command) -> ResponseResult<()> {
    match cmd {
        Command::Help => {
            let text = "–≠—Ç–æ –∫–æ–º–∞–Ω–¥–∞ –ø–æ–º–æ—â–∏".to_string();
            bot.send_message(msg.chat.id, text).await?;
        }
        Command::Start => {

            let patch_image = InputFile::file("src/assets/image/start_image_v1.jpg");

            let text  = "
                –ê—Å—Å–∞–ª—è–º—É –∞–ª–µ–π–∫—É–º! üåô

–¢—ã –≤ –±–æ—Ç–µ –¥–ª—è –∏–∑—É—á–µ–Ω–∏—è –∞—Ä–∞–±—Å–∫–æ–≥–æ —è–∑—ã–∫–∞.
–¢–≤–æ—è —Ü–µ–ª—å ‚Äî —à–∞–≥ –∑–∞ —à–∞–≥–æ–º –ø–æ–≥—Ä—É–∂–∞—Ç—å—Å—è –≤ –º–∏—Ä –∞—Ä–∞–±—Å–∫–æ–≥–æ, —É–ª—É—á—à–∞—Ç—å —Ä–∞–∑–≥–æ–≤–æ—Ä–Ω—ã–µ –Ω–∞–≤—ã–∫–∏ –∏ —á—É–≤—Å—Ç–≤–æ–≤–∞—Ç—å —Å–µ–±—è —É–≤–µ—Ä–µ–Ω–Ω–æ –≤ –æ–±—â–µ–Ω–∏–∏.

‚ú® –ñ–¥—É—Ç —É–ø—Ä–∞–∂–Ω–µ–Ω–∏—è, –¥–∏–∞–ª–æ–≥–∏ –∏ –Ω–æ–≤—ã–µ —Å–ª–æ–≤–∞.

–ì–æ—Ç–æ–≤ –Ω–∞—á–∞—Ç—å –æ–±—É—á–µ–Ω–∏–µ? –ü–∏—à–∏ /help, —á—Ç–æ–±—ã —É–∑–Ω–∞—Ç—å –±–æ–ª—å—à–µ –∏–ª–∏ —Å—Ä–∞–∑—É –≤—ã–±–µ—Ä–∏ —Ç–µ–º—É –¥–ª—è –ø—Ä–∞–∫—Ç–∏–∫–∏.
            ".to_string();
            let keyboard = create_inline_keyboard_meeting_button();

            bot.send_photo(msg.chat.id, patch_image)
                .caption(&text)
                .reply_markup(keyboard)
                .await?;
        }

    }
    Ok(())
}
