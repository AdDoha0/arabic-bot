use teloxide::{
    dispatching::dialogue::GetChatId, prelude::*, types::{CallbackQuery, InputFile, Message}
};
use reqwest;
use std::env;
use teloxide::RequestError;
use std::io;


use crate::{ai::gpt_client::GptClient, keyboard::inline_keyboard::*};
use crate::utils::user_data::{save_user_lesson};
use crate::serializers::{Lesson};
use crate::utils::auxiliary_fn::{load_context, list_files_in_dir};


use crate::ai::create_practice::CreatePractice;
use crate::utils::user_data::get_user_lesson_text;


// –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –∫–Ω–æ–ø–∫–∏ –Ω–∞—á–∞–ª–∞ –æ–±—É—á–µ–Ω–∏—è
pub async fn handle_callback_meeting(bot: Bot, query: CallbackQuery) ->  ResponseResult<()> {

    if let Some(message) = query.message {
        let keyboard = create_inline_keyboard_—Åhoosing_volume().await;
        bot.send_message(message.chat().id, "–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:")
            .reply_markup(keyboard)
            .await?;
    } else {
        log::warn!("–í –∫–æ–ª–±—ç–∫–µ –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ");
    }

    Ok(())
}

// –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –≤—ã–±–æ—Ä–∞ —Ç–æ–º–∞
pub async fn handle_callback_volume(bot: Bot, query: CallbackQuery) ->  ResponseResult<()> {


    let textbook_id = query.data
            .as_ref()
            .map(|data| {
                log::info!("–ü–æ–ª—É—á–µ–Ω callback_data: {}", data);
                data
            })
            .and_then(|data| data.strip_prefix("volume_"))
            .and_then(|id| id.parse::<u32>().ok())
            .unwrap_or(1);

    if let Some(message) = query.message {
        let keyboard = create_inline_keyboard_—Åhoosing_lesson(textbook_id).await;
            bot.send_message(message.chat().id, "–í—ã–±–µ—Ä–∏—Ç–µ —É—Ä–æ–∫ –¥–ª—è —Ç–æ–º–∞")
                .reply_markup(keyboard)
                .await?;
    }
    Ok(())
}




// –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –≤—ã–±–æ—Ä–∞ —É—Ä–æ–∫–∞
pub async fn handle_callback_lesson(bot: Bot, query: CallbackQuery) ->  ResponseResult<()> {

    let lesson_id = query.data
            .as_ref()
            .map(|data| {
                log::info!("–ü–æ–ª—É—á–µ–Ω callback_data: {}", data);
                data
            })
            .and_then(|data| data.strip_prefix("lesson_"))
            .and_then(|id| id.parse::<u32>().ok())
            .unwrap_or(1);


    let client = reqwest::Client::new();
    let url = format!("{}/lessons/{}", env::var("BECKEND_URL").unwrap(), lesson_id);
    log::info!("–ó–∞–ø—Ä–æ—Å –∫ URL: {}", url);
    
    let lesson: Lesson = match client
       .get(&url)
       .send()
       .await {
        Ok(response) => {
            let text = response.text().await.unwrap_or_default();
            log::info!("–û—Ç–≤–µ—Ç –æ—Ç —Å–µ—Ä–≤–µ—Ä–∞: {}", text);
            match serde_json::from_str::<Lesson>(&text) {
                Ok(lesson) => lesson,
                Err(e) => {
                    log::error!("–û—à–∏–±–∫–∞ –ø—Ä–∏ –¥–µ—Å–µ—Ä–∏–∞–ª–∏–∑–∞—Ü–∏–∏ —É—Ä–æ–∫–∞: {}", e);
                    log::error!("–¢–µ–∫—Å—Ç –æ—Ç–≤–µ—Ç–∞: {}", text);
                    Lesson::default()
                }
            }
        },
        Err(e) => {
            log::error!("–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—Ä–æ—Å–µ —É—Ä–æ–∫–∞: {e}");
            Lesson::default()
        }
    };

    if let Some(message) = query.message {
        let chat_id = message.chat().id.0;
        
        // –°–æ—Ö—Ä–∞–Ω—è–µ–º ID —É—Ä–æ–∫–∞ –∏ –µ–≥–æ —Ç–µ–∫—Å—Ç
        if let Some(data) = &query.data {
            if let Err(e) = save_user_lesson(chat_id, data.clone(), lesson.text.clone()) {
                log::warn!("–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ —É—Ä–æ–∫–∞: {}", e);
            }
        }

        bot.send_message(message.chat().id, lesson.text)
            // .parse_mode(teloxide::types::ParseMode::MarkdownV2)
            .await?;

        let practice_keyboard = create_inline_keyboar_lesson_practice();
        bot.send_message(message.chat().id, "–•–æ—Ç–∏—Ç–µ –ø—Ä–∞–∫—Ç–∏–∫—É –ø–æ —ç—Ç–æ–º—É —É—Ä–æ–∫—É?")
            .reply_markup(practice_keyboard)
            .await?;
    }

    Ok(())
}



pub async fn handle_callback_practice(bot: Bot, query: CallbackQuery) ->  ResponseResult<()> {

    if let Some(message) = query.message {
        // –í –±—É–¥—É—â–µ–º —Ç—É—Ç –º–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å –ª–æ–≥–∏–∫—É –¥–ª—è —Ä–∞–∑–Ω—ã—Ö —Ç–∏–ø–æ–≤ –ø—Ä–∞–∫—Ç–∏–∫–∏
        bot.send_message(message.chat().id, format!("–í—ã –≤—ã–±—Ä–∞–ª–∏ –ø—Ä–∞–∫—Ç–∏–∫—É"))
            .await?;
    }

    Ok(())
}


pub async fn handle_callback_lesson_practice(bot: Bot, query: CallbackQuery) -> ResponseResult<()> {


    if let Some(message) = query.message {
        // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–¥–æ–∂–¥–∏—Ç–µ..." –∏ —Å–æ—Ö—Ä–∞–Ω—è–µ–º –µ–≥–æ —á—Ç–æ–± —É–¥–∞–ª–∏—Ç—å –µ–≥–æ –ø–æ–∑–∂–µ
        let waiting_message: Message = bot
            .send_message(message.chat().id, "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–¥–æ–∂–¥–∏—Ç–µ...")
            .await?;

        let context = load_context()
            .await
            .map_err(|e| RequestError::from(io::Error::new(io::ErrorKind::Other, e)))?;

        let lesson_text = match get_user_lesson_text(message.chat().id.0) {
            Some(text) => text,
            None => {
                log::warn!("–£ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –Ω–µ—Ç –≤—ã–±—Ä–∞–Ω–Ω–æ–≥–æ —É—Ä–æ–∫–∞");
                return Ok(());
            }
        };

        let client = CreatePractice {};
        let response = client
            .get_completion(&lesson_text, &context)
            .await
            .map_err(|e| RequestError::from(io::Error::new(io::ErrorKind::Other, e)))?;

        log::info!("–û—Ç–ø—Ä–∞–≤–ª–µ–Ω —É—Ä–æ–∫  API");


         // –£–¥–∞–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–¥–æ–∂–¥–∏—Ç–µ..."
         bot.delete_message(waiting_message.chat.id, waiting_message.id)
            .await?;


        bot.send_message(message.chat().id, response)
           .await?;

    }

    Ok(())
}






// ------------------------Ui-----------------------------







pub async fn handle_callback_textbooks_pdf(bot: Bot, query: CallbackQuery) -> ResponseResult<()> {

    let file_paths = list_files_in_dir("src/assets/textbooks");

    if let Some(message) = query.message {

        bot.send_message(message.chat().id, r#"
        –í–æ—Ç –ø–æ–¥–±–æ—Ä–∫–∞ —É—á–µ–±–Ω–∏–∫–æ–≤ –ø–æ –∞—Ä–∞–±—Å–∫–æ–º—É —è–∑—ã–∫—É. –û–Ω–∏ –ø–æ–¥–æ–π–¥—É—Ç –∫–∞–∫ –¥–ª—è –Ω–∞—á–∏–Ω–∞—é—â–∏—Ö,
        —Ç–∞–∫ –∏ –¥–ª—è —Ç–µ—Ö, –∫—Ç–æ —É–∂–µ –¥–µ–ª–∞–µ—Ç —É—Å–ø–µ—Ö–∏. –ò–∑—É—á–∞–π –≤ —É–¥–æ–±–Ω–æ–º —Ç–µ–º–ø–µ ‚Äî –∏ –ø—É—Å—Ç—å –ê–ª–ª–∞—Ö1
        –æ–±–ª–µ–≥—á–∏—Ç —Ç–µ–±–µ –ø—É—Ç—å –∫ –∑–Ω–∞–Ω–∏—é! ü§≤
        "#).await?;
        
        for path in file_paths {
            bot.send_document(message.chat().id, InputFile::file(path)).await?;
        };

    }
    Ok(())
}