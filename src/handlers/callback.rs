use teloxide::{
    prelude::*,
    types::{CallbackQuery, Message},
    utils::{self, command::BotCommands},
};

use crate::keyboard::inline_keyboard::*;
use crate::utils::user_data::{save_user_lesson, get_user_lesson_text};
use crate::utils::auxiliary_fn::escape_markdown;
use crate::ai::CreatePractice;


// –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –∫–Ω–æ–ø–∫–∏ –Ω–∞—á–∞–ª–∞ –æ–±—É—á–µ–Ω–∏—è
pub async fn handle_callback_meeting(bot: Bot, query: CallbackQuery) ->  ResponseResult<()> {

    if let Some(message) = query.message {
        let keyboard = create_inline_keyboard_—Åhoosing_volume();
        bot.send_message(message.chat().id, "–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:")
            .reply_markup(keyboard)
            .await?;
    } else {
        log::warn!("–í –∫–æ–ª–±—ç–∫–µ –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ");
    }

    Ok(())
}

// –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –≤—ã–±–æ—Ä–∞ —Ç–æ–º–∞
pub async fn handle_callback_volume(bot: Bot, query: CallbackQuery) ->  ResponseResult<()> {

    if let Some(message) = query.message {
        let keyboard = create_inline_keyboard_—Åhoosing_lesson();
        bot.send_message(message.chat().id, "–í—ã–±–µ—Ä–∏—Ç–µ —É—Ä–æ–∫ –¥–ª—è —Ç–æ–º–∞")
            .reply_markup(keyboard)
            .await?;
        }


    Ok(())
}

// –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –≤—ã–±–æ—Ä–∞ —É—Ä–æ–∫–∞
pub async fn handle_callback_lesson(bot: Bot, query: CallbackQuery) ->  ResponseResult<()> {
    struct Lesson {
        text: String,
    }

    let lesson = Lesson {
        text: "üìö *–£—Ä–æ–∫: –ò–¥–∞—Ñ–Ω–∞—è –∫–æ–Ω—Å—Ç—Ä—É–∫—Ü–∏—è \\(ÿßŸÑÿ•ÿ∂ÿßŸÅÿ©\\)*\n\n\
        üî§ *–û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ:*\n\
        –ò–¥–∞—Ñ–∞ \\- —ç—Ç–æ –æ—Å–æ–±–∞—è –≥—Ä–∞–º–º–∞—Ç–∏—á–µ—Å–∫–∞—è –∫–æ–Ω—Å—Ç—Ä—É–∫—Ü–∏—è –≤ –∞—Ä–∞–±—Å–∫–æ–º —è–∑—ã–∫–µ, –≤—ã—Ä–∞–∂–∞—é—â–∞—è –ø—Ä–∏–Ω–∞–¥–ª–µ–∂–Ω–æ—Å—Ç—å –∏–ª–∏ –æ—Ç–Ω–æ—à–µ–Ω–∏–µ –º–µ–∂–¥—É –¥–≤—É–º—è —Å—É—â–µ—Å—Ç–≤–∏—Ç–µ–ª—å–Ω—ã–º–∏\\.\n\n\
        üìù *–ü—Ä–∞–≤–∏–ª–∞ –ø–æ—Å—Ç—Ä–æ–µ–Ω–∏—è:*\n\
        1\\. –ü–µ—Ä–≤–æ–µ —Å–ª–æ–≤–æ \\(ŸÖÿ∂ÿßŸÅ\\) —Ç–µ—Ä—è–µ—Ç –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–Ω—ã–π –∞—Ä—Ç–∏–∫–ª—å ÿßŸÑŸÄ –∏ —Ç–∞–Ω–≤–∏–Ω\n\
        2\\. –í—Ç–æ—Ä–æ–µ —Å–ª–æ–≤–æ \\(ŸÖÿ∂ÿßŸÅ ÿ•ŸÑŸäŸá\\) –≤—Å–µ–≥–¥–∞ —Å—Ç–æ–∏—Ç –≤ —Ä–æ–¥–∏—Ç–µ–ª—å–Ω–æ–º –ø–∞–¥–µ–∂–µ\n\n\
        üéØ *–ü—Ä–∏–º–µ—Ä—ã:*\n\
        ‚Ä¢ `ŸÉŸêÿ™Ÿéÿßÿ®Ÿè ÿßŸÑÿ∑ŸéŸëÿßŸÑŸêÿ®Ÿê` \\(–∫–∏—Ç–∞–±—É\\-—Ç\\-—Ç–∞–ª–∏–±–∏\\) \\- –∫–Ω–∏–≥–∞ —Å—Ç—É–¥–µ–Ω—Ç–∞\n\
        `ŸÉŸêÿ™Ÿéÿßÿ®Ÿè` \\(–∫–Ω–∏–≥–∞\\) \\+ `ÿßŸÑÿ∑ŸéŸëÿßŸÑŸêÿ®Ÿê` \\(—Å—Ç—É–¥–µ–Ω—Ç–∞\\)\n\n\
        ‚Ä¢ `ÿ®ŸéŸäŸíÿ™Ÿè ÿßŸÑŸÖŸèÿØŸéÿ±ŸêŸëÿ≥Ÿê` \\(–±–∞–π—Ç—É\\-–ª—å\\-–º—É–¥–∞—Ä—Ä–∏—Å–∏\\) \\- –¥–æ–º —É—á–∏—Ç–µ–ª—è\n\
        `ÿ®ŸéŸäŸíÿ™Ÿè` \\(–¥–æ–º\\) \\+ `ÿßŸÑŸÖŸèÿØŸéÿ±ŸêŸëÿ≥Ÿê` \\(—É—á–∏—Ç–µ–ª—è\\)\n\n\
        üîç *–í–∞–∂–Ω—ã–µ –∑–∞–º–µ—á–∞–Ω–∏—è:*\n\
        1\\. –ú–æ–∂–Ω–æ —Å—Ç—Ä–æ–∏—Ç—å —Ü–µ–ø–æ—á–∫–∏: `ŸÖŸèÿØŸêŸäÿ±Ÿè ŸÖŸéÿØŸíÿ±Ÿéÿ≥Ÿéÿ©Ÿê ÿßŸÑŸÖŸéÿØŸêŸäŸÜŸéÿ©Ÿê` \\(–¥–∏—Ä–µ–∫—Ç–æ—Ä —à–∫–æ–ª—ã –≥–æ—Ä–æ–¥–∞\\)\n\
        2\\. –ü–µ—Ä–≤–æ–µ —Å–ª–æ–≤–æ –Ω–∏–∫–æ–≥–¥–∞ –Ω–µ –∏–º–µ–µ—Ç –∞—Ä—Ç–∏–∫–ª—è\n\
        3\\. –û–≥–ª–∞—Å–æ–≤–∫–∏ –∫–æ–Ω—Ü–∞ –ø–µ—Ä–≤–æ–≥–æ —Å–ª–æ–≤–∞ –º–µ–Ω—è—é—Ç—Å—è –ø–æ –ø—Ä–∞–≤–∏–ª–∞–º ÿ•ÿπÿ±ÿßÿ®\n\n\
        ‚ö†Ô∏è *–ß–∞—Å—Ç—ã–µ –æ—à–∏–±–∫–∏:*\n\
        ‚Ä¢ –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –∞—Ä—Ç–∏–∫–ª—è –∫ –ø–µ—Ä–≤–æ–º—É —Å–ª–æ–≤—É\n\
        ‚Ä¢ –ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ã–µ –ø–∞–¥–µ–∂–Ω—ã–µ –æ–∫–æ–Ω—á–∞–Ω–∏—è\n\
        ‚Ä¢ –†–∞–∑—Ä—ã–≤ –∏–¥–∞—Ñ–Ω–æ–π —Ü–µ–ø–æ—á–∫–∏ –ø—Ä–∏–ª–∞–≥–∞—Ç–µ–ª—å–Ω—ã–º
        ".to_string(),
    };

    if let Some(message) = query.message {
        let chat_id = message.chat().id.0;

        // –°–æ—Ö—Ä–∞–Ω—è–µ–º ID —É—Ä–æ–∫–∞ –∏ –µ–≥–æ —Ç–µ–∫—Å—Ç
        if let Some(data) = &query.data {
            if let Err(e) = save_user_lesson(chat_id, data.clone(), lesson.text.clone()) {
                log::warn!("–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ —É—Ä–æ–∫–∞: {}", e);
            }
        }

        bot.send_message(message.chat().id, lesson.text)
            .parse_mode(teloxide::types::ParseMode::MarkdownV2)
            .await?;

        let practice_keyboard = create_inline_keyboar_lesson_practice();
        bot.send_message(message.chat().id, "–•–æ—Ç–∏—Ç–µ –ø—Ä–∞–∫—Ç–∏–∫—É –ø–æ —ç—Ç–æ–º—É —É—Ä–æ–∫—É?")
            .reply_markup(practice_keyboard)
            .await?;
    }

    Ok(())
}



pub async fn handle_callback_practice(bot: Bot, query: CallbackQuery) ->  ResponseResult<()> {

    if let Some(message) = query.message {
        // –í –±—É–¥—É—â–µ–º —Ç—É—Ç –º–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å –ª–æ–≥–∏–∫—É –¥–ª—è —Ä–∞–∑–Ω—ã—Ö —Ç–∏–ø–æ–≤ –ø—Ä–∞–∫—Ç–∏–∫–∏
        bot.send_message(message.chat().id, format!("–í—ã –≤—ã–±—Ä–∞–ª–∏ –ø—Ä–∞–∫—Ç–∏–∫—É"))
            .await?;
    }

    Ok(())
}


pub async fn handle_callback_lesson_practice(bot: Bot, query: CallbackQuery) ->  ResponseResult<()> {

    log::info!("–ù–∞—á–∞–ª–æ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∫–æ–ª–±—ç–∫–∞ 'handle_callback_lesson_practice");

    if let Some(message) = query.message {

        let chat_id = message.chat().id.0;


        match get_user_lesson_text(chat_id) {
            Some(lesson_text) => {
                // –ó–¥–µ—Å—å –º–æ–∂–Ω–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å lesson_text (–ø–æ—Å–ª–µ–¥–Ω–∏–π —É—Ä–æ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è)

                log::info!("–¢–µ–∫—Å—Ç —É—Ä–æ–∫–∞ | –ø–æ—Å–ª–µ–¥–Ω–∏–π —É—Ä–æ–∫ –æ—Ç–∫—Ä—ã—Ç—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º: {}", lesson_text);

                // let escaped_lesson_text = escape_markdown(&lesson_text);

                bot.send_message(message.chat().id,
                    "–ì–µ–Ω–µ—Ä–∏—Ä—É—é –ø—Ä–∞–∫—Ç–∏–∫—É –Ω–∞ –æ—Å–Ω–æ–≤–µ –∏–∑—É—á–µ–Ω–Ω–æ–≥–æ –º–∞—Ç–µ—Ä–∏–∞–ª–∞...").await?;


                let mut practie = CreatePractice::new();

                match practie.get_more_practice(chat_id, &lesson_text).await {
                    Ok(practice) => {
                        // let escaped_practice = escape_markdown(&practice);
                        // log::info!("—ç–∫—Ä–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–ø–µ—Ü —Å–∏–º–≤–æ–ª–æ–≤ –ø—Ä–æ—à–ª–æ —É—Å–ø–µ—à–Ω–æ");

                        bot.send_message(message.chat().id, practice)
                        //    .parse_mode(teloxide::types::ParseMode::MarkdownV2)
                           .await?;
                        log::info!("–ü—Ä–∞–∫—Ç–∏–∫–∞ —É—Å–ø–µ—à–Ω–æ —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–∞ –∏ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é");
                    }
                    Err(e) => {
                        log::error!("–û—à–∏–±–∫–∞ –ø—Ä–∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –ø—Ä–∞–∫—Ç–∏–∫–∏: {}", e);
                        bot.send_message(message.chat().id,
                            "–ò–∑–≤–∏–Ω–∏—Ç–µ, –ø—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –ø—Ä–∞–∫—Ç–∏–∫–∏. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")
                           .await?;
                    }
                }
            },
            None => {
                bot.send_message(message.chat().id,
                    "–ù–µ –º–æ–≥—É –Ω–∞–π—Ç–∏ —Ç–µ–∫—Å—Ç —É—Ä–æ–∫–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ —É—Ä–æ–∫ —Å–Ω–æ–≤–∞.")
                    .await?;
            }
        }
    }
    Ok(())
}
